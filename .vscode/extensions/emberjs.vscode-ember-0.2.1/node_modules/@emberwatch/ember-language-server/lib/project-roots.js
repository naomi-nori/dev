'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const files_1 = require("vscode-languageserver/lib/files");
const walkSync = require('walk-sync');
class Project {
    constructor(root) {
        this.root = root;
    }
}
exports.Project = Project;
class ProjectRoots {
    constructor() {
        this.projects = new Map();
    }
    initialize(workspaceRoot) {
        return __awaiter(this, void 0, void 0, function* () {
            this.workspaceRoot = workspaceRoot;
            const roots = walkSync(workspaceRoot, {
                directories: false,
                globs: ['**/ember-cli-build.js'],
                ignore: [
                    '**/.git/**',
                    '**/bower_components/**',
                    '**/dist/**',
                    '**/node_modules/**',
                    '**/tmp/**',
                ]
            });
            roots.forEach((rootPath) => {
                const fullPath = path_1.dirname(path_1.join(workspaceRoot, rootPath));
                this.onProjectAdd(fullPath);
            });
        });
    }
    onProjectAdd(path) {
        console.log(`Ember CLI project added at ${path}`);
        this.projects.set(path, new Project(path));
    }
    projectForUri(uri) {
        let path = files_1.uriToFilePath(uri);
        if (!path)
            return;
        let root = (Array.from(this.projects.keys()) || [])
            .filter(root => path.indexOf(root) === 0)
            .reduce((a, b) => a.length > b.length ? a : b, '');
        return this.projects.get(root);
    }
}
exports.default = ProjectRoots;
//# sourceMappingURL=project-roots.js.map