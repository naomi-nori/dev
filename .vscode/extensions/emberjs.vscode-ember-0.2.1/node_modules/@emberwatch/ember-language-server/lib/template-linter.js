"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_1 = require("vscode-languageserver");
const file_extension_1 = require("./utils/file-extension");
const diagnostic_1 = require("./utils/diagnostic");
const path = require("path");
const fs = require("fs");
class TemplateLinter {
    constructor(server) {
        this.server = server;
        this._linterCache = new Map();
    }
    lint(textDocument) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!file_extension_1.hasExtension(textDocument, '.hbs')) {
                return;
            }
            const config = this.getLinterConfig(textDocument.uri);
            if (!config) {
                return;
            }
            const TemplateLinter = yield this.getLinter(textDocument.uri);
            const linter = new TemplateLinter(config);
            const source = textDocument.getText();
            const errors = linter.verify({
                source,
                moduleId: textDocument.uri
            });
            const diagnostics = errors.map((error) => diagnostic_1.toDiagnostic(source, error));
            this.server.connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });
        });
    }
    getLinterConfig(uri) {
        const project = this.server.projectRoots.projectForUri(uri);
        if (!project) {
            return;
        }
        const configPath = path.join(project.root, '.template-lintrc.js');
        if (!fs.existsSync(configPath)) {
            return;
        }
        return { configPath };
    }
    getLinter(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            const project = this.server.projectRoots.projectForUri(uri);
            if (!project) {
                return;
            }
            if (this._linterCache.has(project)) {
                return this._linterCache.get(project);
            }
            try {
                const linter = yield vscode_languageserver_1.Files.resolveModule(project.root, 'ember-template-lint');
                this._linterCache.set(project, linter);
                return linter;
            }
            catch (error) {
                console.log('Module ember-template-lint not found.');
            }
        });
    }
}
exports.default = TemplateLinter;
//# sourceMappingURL=template-linter.js.map