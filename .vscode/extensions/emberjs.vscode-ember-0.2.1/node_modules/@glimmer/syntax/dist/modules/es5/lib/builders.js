import * as AST from './types/nodes';
function buildMustache(path, params, hash, raw, loc) {
    if (!AST.isLiteral(path)) {
        path = buildPath(path);
    }
    return {
        type: 'MustacheStatement',
        path: path,
        params: params || [],
        hash: hash || buildHash([]),
        escaped: !raw,
        loc: buildLoc(loc || null)
    };
}
function buildBlock(path, params, hash, program, inverse, loc) {
    return {
        type: 'BlockStatement',
        path: buildPath(path),
        params: params || [],
        hash: hash || buildHash([]),
        program: program || null,
        inverse: inverse || null,
        loc: buildLoc(loc || null)
    };
}
function buildElementModifier(path, params, hash, loc) {
    return {
        type: 'ElementModifierStatement',
        path: buildPath(path),
        params: params || [],
        hash: hash || buildHash([]),
        loc: buildLoc(loc || null)
    };
}
function buildPartial(name, params, hash, indent, loc) {
    return {
        type: 'PartialStatement',
        name: name,
        params: params || [],
        hash: hash || buildHash([]),
        indent: indent || '',
        strip: { open: false, close: false },
        loc: buildLoc(loc || null)
    };
}
function buildComment(value, loc) {
    return {
        type: 'CommentStatement',
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildMustacheComment(value, loc) {
    return {
        type: 'MustacheCommentStatement',
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildConcat(parts, loc) {
    return {
        type: 'ConcatStatement',
        parts: parts || [],
        loc: buildLoc(loc || null)
    };
}
function buildElement(tag, attributes, modifiers, children, comments, loc) {
    // this is used for backwards compat prior to `comments` being added to the AST
    if (!Array.isArray(comments)) {
        loc = comments;
        comments = [];
    }
    // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST
    var selfClosing = false;
    if (typeof tag === 'object') {
        selfClosing = tag.selfClosing;
        tag = tag.name;
    }
    return {
        type: 'ElementNode',
        tag: tag || '',
        selfClosing: selfClosing,
        attributes: attributes || [],
        blockParams: [],
        modifiers: modifiers || [],
        comments: comments || [],
        children: children || [],
        loc: buildLoc(loc || null)
    };
}
function buildAttr(name, value, loc) {
    return {
        type: 'AttrNode',
        name: name,
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildText(chars, loc) {
    return {
        type: 'TextNode',
        chars: chars || '',
        loc: buildLoc(loc || null)
    };
}
// Expressions
function buildSexpr(path, params, hash, loc) {
    return {
        type: 'SubExpression',
        path: buildPath(path),
        params: params || [],
        hash: hash || buildHash([]),
        loc: buildLoc(loc || null)
    };
}
function buildPath(original, loc) {
    if (typeof original !== 'string') return original;
    var parts = original.split('.');
    var thisHead = false;
    if (parts[0] === 'this') {
        thisHead = true;
        parts = parts.slice(1);
    }
    return {
        type: 'PathExpression',
        original: original,
        this: thisHead,
        parts: parts,
        data: false,
        loc: buildLoc(loc || null)
    };
}
function buildLiteral(type, value, loc) {
    return {
        type: type,
        value: value,
        original: value,
        loc: buildLoc(loc || null)
    };
}
// Miscellaneous
function buildHash(pairs, loc) {
    return {
        type: 'Hash',
        pairs: pairs || [],
        loc: buildLoc(loc || null)
    };
}
function buildPair(key, value, loc) {
    return {
        type: 'HashPair',
        key: key,
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildProgram(body, blockParams, loc) {
    return {
        type: 'Program',
        body: body || [],
        blockParams: blockParams || [],
        loc: buildLoc(loc || null)
    };
}
function buildSource(source) {
    return source || null;
}
function buildPosition(line, column) {
    return {
        line: line,
        column: column
    };
}
export var SYNTHETIC = {
    source: '(synthetic)',
    start: { line: 1, column: 0 },
    end: { line: 1, column: 0 }
};
function buildLoc() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    if (args.length === 1) {
        var loc = args[0];
        if (loc && typeof loc === 'object') {
            return {
                source: buildSource(loc.source),
                start: buildPosition(loc.start.line, loc.start.column),
                end: buildPosition(loc.end.line, loc.end.column)
            };
        } else {
            return SYNTHETIC;
        }
    } else {
        var startLine = args[0],
            startColumn = args[1],
            endLine = args[2],
            endColumn = args[3],
            source = args[4];

        return {
            source: buildSource(source),
            start: buildPosition(startLine, startColumn),
            end: buildPosition(endLine, endColumn)
        };
    }
}
export default {
    mustache: buildMustache,
    block: buildBlock,
    partial: buildPartial,
    comment: buildComment,
    mustacheComment: buildMustacheComment,
    element: buildElement,
    elementModifier: buildElementModifier,
    attr: buildAttr,
    text: buildText,
    sexpr: buildSexpr,
    path: buildPath,
    concat: buildConcat,
    hash: buildHash,
    pair: buildPair,
    literal: buildLiteral,
    program: buildProgram,
    loc: buildLoc,
    pos: buildPosition,
    string: literal('StringLiteral'),
    boolean: literal('BooleanLiteral'),
    number: literal('NumberLiteral'),
    undefined: function (_undefined) {
        function undefined() {
            return _undefined.apply(this, arguments);
        }

        undefined.toString = function () {
            return _undefined.toString();
        };

        return undefined;
    }(function () {
        return buildLiteral('UndefinedLiteral', undefined);
    }),
    null: function _null() {
        return buildLiteral('NullLiteral', null);
    }
};
function literal(type) {
    return function (value) {
        return buildLiteral(type, value);
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL2J1aWxkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxBQUFHLFNBQU0sQUFBZSxBQUFDO0FBUXJDLHVCQUNFLEFBQStCLE1BQy9CLEFBQXlCLFFBQ3pCLEFBQWUsTUFDZixBQUFhLEtBQ2IsQUFBd0IsS0FFeEI7UUFBSSxDQUFDLEFBQUcsSUFBQyxBQUFTLFVBQUMsQUFBSSxBQUFDLE9BQUUsQUFDeEIsQUFBSTtlQUFHLEFBQVMsVUFBQyxBQUFJLEFBQUMsQUFBQyxBQUN4QjtBQUVEOztjQUNRLEFBQW1CLEFBQ3pCLEFBQUk7QUFDSixBQUFNO2dCQUFFLEFBQU0sVUFBSSxBQUFFLEFBQ3BCLEFBQUk7Y0FBRSxBQUFJLFFBQUksQUFBUyxVQUFDLEFBQUUsQUFBQyxBQUMzQixBQUFPO2lCQUFFLENBQUMsQUFBRyxBQUNiLEFBQUc7YUFBRSxBQUFRLFNBQUMsQUFBRyxPQU5aLEFBTWdCLEFBQUksQUFBQyxBQUMzQixBQUFDLEFBQ0osQUFBQztBQVBHLEFBQUk7O0FBU1Isb0JBQ0UsQUFBaUIsTUFDakIsQUFBZ0MsUUFDaEMsQUFBc0IsTUFDdEIsQUFBb0IsU0FDcEIsQUFBNkIsU0FDN0IsQUFBd0IsS0FFeEI7O2NBQ1EsQUFBZ0IsQUFDdEIsQUFBSTtjQUFFLEFBQVMsVUFBQyxBQUFJLEFBQUMsQUFDckIsQUFBTTtnQkFBRSxBQUFNLFVBQUksQUFBRSxBQUNwQixBQUFJO2NBQUUsQUFBSSxRQUFJLEFBQVMsVUFBQyxBQUFFLEFBQUMsQUFDM0IsQUFBTztpQkFBRSxBQUFPLFdBQUksQUFBSSxBQUN4QixBQUFPO2lCQUFFLEFBQU8sV0FBSSxBQUFJLEFBQ3hCLEFBQUc7YUFBRSxBQUFRLFNBQUMsQUFBRyxPQVBaLEFBT2dCLEFBQUksQUFBQyxBQUMzQixBQUFDLEFBQ0osQUFBQztBQVJH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QixBQUd1QixBQUFTLEFBQUMsQUFDdkMsQUFBQyxBQUNILEFBQ0g7QUFMTSxBQUFNO0FBS1g7O0FBRUQ7Y0FDWSxBQUFhLEFBQ3ZCLEFBQUs7V0FBRSxBQUFVLEFBQ2pCLEFBQU87YUFBRSxBQUFZLEFBQ3JCLEFBQU87YUFBRSxBQUFZLEFBQ3JCLEFBQWU7cUJBQUUsQUFBb0IsQUFDckMsQUFBTzthQUFFLEFBQVksQUFDckIsQUFBZTtxQkFBRSxBQUFvQixBQUNyQyxBQUFJO1VBQUUsQUFBUyxBQUNmLEFBQUk7VUFBRSxBQUFTLEFBQ2YsQUFBSztXQUFFLEFBQVUsQUFDakIsQUFBSTtVQUFFLEFBQVMsQUFDZixBQUFNO1lBQUUsQUFBVyxBQUNuQixBQUFJO1VBQUUsQUFBUyxBQUNmLEFBQUk7VUFBRSxBQUFTLEFBQ2YsQUFBTzthQUFFLEFBQVksQUFDckIsQUFBTzthQUFFLEFBQVksQUFDckIsQUFBRztTQUFFLEFBQVEsQUFDYixBQUFHO1NBQUUsQUFBYSxBQUVsQixBQUFNO1lBQUUsQUFBTyxRQUFDLEFBQWUsQUFBQyxBQUNoQyxBQUFPO2FBQUUsQUFBTyxRQUFDLEFBQWdCLEFBQUMsQUFDbEMsQUFBTTtZQUFFLEFBQU8sUUFBQyxBQUFlLEFBQUMsQUFDaEMsQUFBUzs7QUF0QlQsQUFBUTs7Ozs7Ozs7O2tCQXVCTjtlQUFPLEFBQVksYUFBQyxBQUFrQixvQkFBRSxBQUFTLEFBQUMsQUFBQyxBQUNyRCxBQUFDO0FBQ0QsQUFBSTsyQkFDRjtlQUFPLEFBQVksYUFBQyxBQUFhLGVBQUUsQUFBSSxBQUFDLEFBQUMsQUFDM0MsQUFBQyxBQUNGLEFBQUM7QUE3QmE7O0FBK0JmLGlCQUF3QyxBQUFlLE1BQ3JEO1dBQU8sVUFBUyxBQUFpQixPQUMvQjtlQUFPLEFBQVksYUFBQyxBQUFJLE1BQUUsQUFBSyxBQUFDLEFBQUMsQUFDbkMsQUFBQyxBQUFDLEFBQ0o7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFTVCBmcm9tICcuL3R5cGVzL25vZGVzJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuXG4vLyBTdGF0ZW1lbnRzXG5cbmV4cG9ydCB0eXBlIEJ1aWxkZXJQYXRoID0gc3RyaW5nIHwgQVNULlBhdGhFeHByZXNzaW9uO1xuZXhwb3J0IHR5cGUgVGFnRGVzY3JpcHRvciA9IHN0cmluZyB8IHsgbmFtZTogc3RyaW5nOyBzZWxmQ2xvc2luZzogYm9vbGVhbiB9O1xuXG5mdW5jdGlvbiBidWlsZE11c3RhY2hlKFxuICBwYXRoOiBCdWlsZGVyUGF0aCB8IEFTVC5MaXRlcmFsLFxuICBwYXJhbXM/OiBBU1QuRXhwcmVzc2lvbltdLFxuICBoYXNoPzogQVNULkhhc2gsXG4gIHJhdz86IGJvb2xlYW4sXG4gIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvblxuKTogQVNULk11c3RhY2hlU3RhdGVtZW50IHtcbiAgaWYgKCFBU1QuaXNMaXRlcmFsKHBhdGgpKSB7XG4gICAgcGF0aCA9IGJ1aWxkUGF0aChwYXRoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ011c3RhY2hlU3RhdGVtZW50JyxcbiAgICBwYXRoLFxuICAgIHBhcmFtczogcGFyYW1zIHx8IFtdLFxuICAgIGhhc2g6IGhhc2ggfHwgYnVpbGRIYXNoKFtdKSxcbiAgICBlc2NhcGVkOiAhcmF3LFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZEJsb2NrKFxuICBwYXRoOiBCdWlsZGVyUGF0aCxcbiAgcGFyYW1zOiBPcHRpb248QVNULkV4cHJlc3Npb25bXT4sXG4gIGhhc2g6IE9wdGlvbjxBU1QuSGFzaD4sXG4gIHByb2dyYW06IEFTVC5Qcm9ncmFtLFxuICBpbnZlcnNlPzogT3B0aW9uPEFTVC5Qcm9ncmFtPixcbiAgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uXG4pOiBBU1QuQmxvY2tTdGF0ZW1lbnQge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCbG9ja1N0YXRlbWVudCcsXG4gICAgcGF0aDogYnVpbGRQYXRoKHBhdGgpLFxuICAgIHBhcmFtczogcGFyYW1zIHx8IFtdLFxuICAgIGhhc2g6IGhhc2ggfHwgYnVpbGRIYXNoKFtdKSxcbiAgICBwcm9ncmFtOiBwcm9ncmFtIHx8IG51bGwsXG4gICAgaW52ZXJzZTogaW52ZXJzZSB8fCBudWxsLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZEVsZW1lbnRNb2RpZmllcihcbiAgcGF0aDogQnVpbGRlclBhdGgsXG4gIHBhcmFtcz86IEFTVC5FeHByZXNzaW9uW10sXG4gIGhhc2g/OiBBU1QuSGFzaCxcbiAgbG9jPzogT3B0aW9uPEFTVC5Tb3VyY2VMb2NhdGlvbj5cbik6IEFTVC5FbGVtZW50TW9kaWZpZXJTdGF0ZW1lbnQge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdFbGVtZW50TW9kaWZpZXJTdGF0ZW1lbnQnLFxuICAgIHBhdGg6IGJ1aWxkUGF0aChwYXRoKSxcbiAgICBwYXJhbXM6IHBhcmFtcyB8fCBbXSxcbiAgICBoYXNoOiBoYXNoIHx8IGJ1aWxkSGFzaChbXSksXG4gICAgbG9jOiBidWlsZExvYyhsb2MgfHwgbnVsbCksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUGFydGlhbChcbiAgbmFtZTogQVNULlBhdGhFeHByZXNzaW9uLFxuICBwYXJhbXM/OiBBU1QuRXhwcmVzc2lvbltdLFxuICBoYXNoPzogQVNULkhhc2gsXG4gIGluZGVudD86IHN0cmluZyxcbiAgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uXG4pOiBBU1QuUGFydGlhbFN0YXRlbWVudCB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1BhcnRpYWxTdGF0ZW1lbnQnLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcGFyYW1zOiBwYXJhbXMgfHwgW10sXG4gICAgaGFzaDogaGFzaCB8fCBidWlsZEhhc2goW10pLFxuICAgIGluZGVudDogaW5kZW50IHx8ICcnLFxuICAgIHN0cmlwOiB7IG9wZW46IGZhbHNlLCBjbG9zZTogZmFsc2UgfSxcbiAgICBsb2M6IGJ1aWxkTG9jKGxvYyB8fCBudWxsKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRDb21tZW50KHZhbHVlOiBzdHJpbmcsIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvbik6IEFTVC5Db21tZW50U3RhdGVtZW50IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQ29tbWVudFN0YXRlbWVudCcsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZE11c3RhY2hlQ29tbWVudChcbiAgdmFsdWU6IHN0cmluZyxcbiAgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uXG4pOiBBU1QuTXVzdGFjaGVDb21tZW50U3RhdGVtZW50IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTXVzdGFjaGVDb21tZW50U3RhdGVtZW50JyxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgbG9jOiBidWlsZExvYyhsb2MgfHwgbnVsbCksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQ29uY2F0KFxuICBwYXJ0czogKEFTVC5UZXh0Tm9kZSB8IEFTVC5NdXN0YWNoZVN0YXRlbWVudClbXSxcbiAgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uXG4pOiBBU1QuQ29uY2F0U3RhdGVtZW50IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQ29uY2F0U3RhdGVtZW50JyxcbiAgICBwYXJ0czogcGFydHMgfHwgW10sXG4gICAgbG9jOiBidWlsZExvYyhsb2MgfHwgbnVsbCksXG4gIH07XG59XG5cbi8vIE5vZGVzXG5cbmZ1bmN0aW9uIGJ1aWxkRWxlbWVudChcbiAgdGFnOiBUYWdEZXNjcmlwdG9yLFxuICBhdHRyaWJ1dGVzPzogQVNULkF0dHJOb2RlW10sXG4gIG1vZGlmaWVycz86IEFTVC5FbGVtZW50TW9kaWZpZXJTdGF0ZW1lbnRbXSxcbiAgY2hpbGRyZW4/OiBBU1QuU3RhdGVtZW50W10sXG4gIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvblxuKTogQVNULkVsZW1lbnROb2RlO1xuZnVuY3Rpb24gYnVpbGRFbGVtZW50KFxuICB0YWc6IFRhZ0Rlc2NyaXB0b3IsXG4gIGF0dHJpYnV0ZXM/OiBBU1QuQXR0ck5vZGVbXSxcbiAgbW9kaWZpZXJzPzogQVNULkVsZW1lbnRNb2RpZmllclN0YXRlbWVudFtdLFxuICBjaGlsZHJlbj86IEFTVC5TdGF0ZW1lbnRbXSxcbiAgY29tbWVudHM/OiBBU1QuTXVzdGFjaGVDb21tZW50U3RhdGVtZW50W10sXG4gIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvblxuKTogQVNULkVsZW1lbnROb2RlO1xuXG5mdW5jdGlvbiBidWlsZEVsZW1lbnQoXG4gIHRhZzogVGFnRGVzY3JpcHRvcixcbiAgYXR0cmlidXRlcz86IEFTVC5BdHRyTm9kZVtdLFxuICBtb2RpZmllcnM/OiBBU1QuRWxlbWVudE1vZGlmaWVyU3RhdGVtZW50W10sXG4gIGNoaWxkcmVuPzogQVNULlN0YXRlbWVudFtdLFxuICBjb21tZW50cz86IEFTVC5NdXN0YWNoZUNvbW1lbnRTdGF0ZW1lbnRbXSB8IEFTVC5Tb3VyY2VMb2NhdGlvbixcbiAgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uXG4pOiBBU1QuRWxlbWVudE5vZGUge1xuICAvLyB0aGlzIGlzIHVzZWQgZm9yIGJhY2t3YXJkcyBjb21wYXQgcHJpb3IgdG8gYGNvbW1lbnRzYCBiZWluZyBhZGRlZCB0byB0aGUgQVNUXG4gIGlmICghQXJyYXkuaXNBcnJheShjb21tZW50cykpIHtcbiAgICBsb2MgPSBjb21tZW50cztcbiAgICBjb21tZW50cyA9IFtdO1xuICB9XG5cbiAgLy8gdGhpcyBpcyB1c2VkIGZvciBiYWNrd2FyZHMgY29tcGF0LCBwcmlvciB0byBgc2VsZkNsb3NpbmdgIGJlaW5nIHBhcnQgb2YgdGhlIEVsZW1lbnROb2RlIEFTVFxuICBsZXQgc2VsZkNsb3NpbmcgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdvYmplY3QnKSB7XG4gICAgc2VsZkNsb3NpbmcgPSB0YWcuc2VsZkNsb3Npbmc7XG4gICAgdGFnID0gdGFnLm5hbWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdFbGVtZW50Tm9kZScsXG4gICAgdGFnOiB0YWcgfHwgJycsXG4gICAgc2VsZkNsb3Npbmc6IHNlbGZDbG9zaW5nLFxuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMgfHwgW10sXG4gICAgYmxvY2tQYXJhbXM6IFtdLFxuICAgIG1vZGlmaWVyczogbW9kaWZpZXJzIHx8IFtdLFxuICAgIGNvbW1lbnRzOiBjb21tZW50cyB8fCBbXSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4gfHwgW10sXG4gICAgbG9jOiBidWlsZExvYyhsb2MgfHwgbnVsbCksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQXR0cihcbiAgbmFtZTogc3RyaW5nLFxuICB2YWx1ZTogQVNULkF0dHJOb2RlWyd2YWx1ZSddLFxuICBsb2M/OiBBU1QuU291cmNlTG9jYXRpb25cbik6IEFTVC5BdHRyTm9kZSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0F0dHJOb2RlJyxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBsb2M6IGJ1aWxkTG9jKGxvYyB8fCBudWxsKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRUZXh0KGNoYXJzPzogc3RyaW5nLCBsb2M/OiBBU1QuU291cmNlTG9jYXRpb24pOiBBU1QuVGV4dE5vZGUge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdUZXh0Tm9kZScsXG4gICAgY2hhcnM6IGNoYXJzIHx8ICcnLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpLFxuICB9O1xufVxuXG4vLyBFeHByZXNzaW9uc1xuXG5mdW5jdGlvbiBidWlsZFNleHByKFxuICBwYXRoOiBCdWlsZGVyUGF0aCxcbiAgcGFyYW1zPzogQVNULkV4cHJlc3Npb25bXSxcbiAgaGFzaD86IEFTVC5IYXNoLFxuICBsb2M/OiBBU1QuU291cmNlTG9jYXRpb25cbik6IEFTVC5TdWJFeHByZXNzaW9uIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnU3ViRXhwcmVzc2lvbicsXG4gICAgcGF0aDogYnVpbGRQYXRoKHBhdGgpLFxuICAgIHBhcmFtczogcGFyYW1zIHx8IFtdLFxuICAgIGhhc2g6IGhhc2ggfHwgYnVpbGRIYXNoKFtdKSxcbiAgICBsb2M6IGJ1aWxkTG9jKGxvYyB8fCBudWxsKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRQYXRoKG9yaWdpbmFsOiBCdWlsZGVyUGF0aCwgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uKTogQVNULlBhdGhFeHByZXNzaW9uIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ3N0cmluZycpIHJldHVybiBvcmlnaW5hbDtcblxuICBsZXQgcGFydHMgPSBvcmlnaW5hbC5zcGxpdCgnLicpO1xuICBsZXQgdGhpc0hlYWQgPSBmYWxzZTtcblxuICBpZiAocGFydHNbMF0gPT09ICd0aGlzJykge1xuICAgIHRoaXNIZWFkID0gdHJ1ZTtcbiAgICBwYXJ0cyA9IHBhcnRzLnNsaWNlKDEpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLFxuICAgIG9yaWdpbmFsLFxuICAgIHRoaXM6IHRoaXNIZWFkLFxuICAgIHBhcnRzLFxuICAgIGRhdGE6IGZhbHNlLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZExpdGVyYWw8VCBleHRlbmRzIEFTVC5MaXRlcmFsPihcbiAgdHlwZTogVFsndHlwZSddLFxuICB2YWx1ZTogVFsndmFsdWUnXSxcbiAgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uXG4pOiBBU1QuTGl0ZXJhbCB7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB2YWx1ZSxcbiAgICBvcmlnaW5hbDogdmFsdWUsXG4gICAgbG9jOiBidWlsZExvYyhsb2MgfHwgbnVsbCksXG4gIH0gYXMgQVNULkxpdGVyYWw7XG59XG5cbi8vIE1pc2NlbGxhbmVvdXNcblxuZnVuY3Rpb24gYnVpbGRIYXNoKHBhaXJzPzogQVNULkhhc2hQYWlyW10sIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvbik6IEFTVC5IYXNoIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnSGFzaCcsXG4gICAgcGFpcnM6IHBhaXJzIHx8IFtdLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZFBhaXIoa2V5OiBzdHJpbmcsIHZhbHVlOiBBU1QuRXhwcmVzc2lvbiwgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uKTogQVNULkhhc2hQYWlyIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnSGFzaFBhaXInLFxuICAgIGtleToga2V5LFxuICAgIHZhbHVlLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZFByb2dyYW0oXG4gIGJvZHk/OiBBU1QuU3RhdGVtZW50W10sXG4gIGJsb2NrUGFyYW1zPzogc3RyaW5nW10sXG4gIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvblxuKTogQVNULlByb2dyYW0ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQcm9ncmFtJyxcbiAgICBib2R5OiBib2R5IHx8IFtdLFxuICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyB8fCBbXSxcbiAgICBsb2M6IGJ1aWxkTG9jKGxvYyB8fCBudWxsKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRTb3VyY2Uoc291cmNlPzogc3RyaW5nKSB7XG4gIHJldHVybiBzb3VyY2UgfHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gYnVpbGRQb3NpdGlvbihsaW5lOiBudW1iZXIsIGNvbHVtbjogbnVtYmVyKSB7XG4gIHJldHVybiB7XG4gICAgbGluZSxcbiAgICBjb2x1bW4sXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBTWU5USEVUSUM6IEFTVC5Tb3VyY2VMb2NhdGlvbiA9IHtcbiAgc291cmNlOiAnKHN5bnRoZXRpYyknLFxuICBzdGFydDogeyBsaW5lOiAxLCBjb2x1bW46IDAgfSxcbiAgZW5kOiB7IGxpbmU6IDEsIGNvbHVtbjogMCB9LFxufTtcblxuZnVuY3Rpb24gYnVpbGRMb2MobG9jOiBPcHRpb248QVNULlNvdXJjZUxvY2F0aW9uPik6IEFTVC5Tb3VyY2VMb2NhdGlvbjtcbmZ1bmN0aW9uIGJ1aWxkTG9jKFxuICBzdGFydExpbmU6IG51bWJlcixcbiAgc3RhcnRDb2x1bW46IG51bWJlcixcbiAgZW5kTGluZT86IG51bWJlcixcbiAgZW5kQ29sdW1uPzogbnVtYmVyLFxuICBzb3VyY2U/OiBzdHJpbmdcbik6IEFTVC5Tb3VyY2VMb2NhdGlvbjtcblxuZnVuY3Rpb24gYnVpbGRMb2MoLi4uYXJnczogYW55W10pOiBBU1QuU291cmNlTG9jYXRpb24ge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICBsZXQgbG9jID0gYXJnc1swXTtcblxuICAgIGlmIChsb2MgJiYgdHlwZW9mIGxvYyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogYnVpbGRTb3VyY2UobG9jLnNvdXJjZSksXG4gICAgICAgIHN0YXJ0OiBidWlsZFBvc2l0aW9uKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uKSxcbiAgICAgICAgZW5kOiBidWlsZFBvc2l0aW9uKGxvYy5lbmQubGluZSwgbG9jLmVuZC5jb2x1bW4pLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFNZTlRIRVRJQztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IFtzdGFydExpbmUsIHN0YXJ0Q29sdW1uLCBlbmRMaW5lLCBlbmRDb2x1bW4sIHNvdXJjZV0gPSBhcmdzO1xuICAgIHJldHVybiB7XG4gICAgICBzb3VyY2U6IGJ1aWxkU291cmNlKHNvdXJjZSksXG4gICAgICBzdGFydDogYnVpbGRQb3NpdGlvbihzdGFydExpbmUsIHN0YXJ0Q29sdW1uKSxcbiAgICAgIGVuZDogYnVpbGRQb3NpdGlvbihlbmRMaW5lLCBlbmRDb2x1bW4pLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBtdXN0YWNoZTogYnVpbGRNdXN0YWNoZSxcbiAgYmxvY2s6IGJ1aWxkQmxvY2ssXG4gIHBhcnRpYWw6IGJ1aWxkUGFydGlhbCxcbiAgY29tbWVudDogYnVpbGRDb21tZW50LFxuICBtdXN0YWNoZUNvbW1lbnQ6IGJ1aWxkTXVzdGFjaGVDb21tZW50LFxuICBlbGVtZW50OiBidWlsZEVsZW1lbnQsXG4gIGVsZW1lbnRNb2RpZmllcjogYnVpbGRFbGVtZW50TW9kaWZpZXIsXG4gIGF0dHI6IGJ1aWxkQXR0cixcbiAgdGV4dDogYnVpbGRUZXh0LFxuICBzZXhwcjogYnVpbGRTZXhwcixcbiAgcGF0aDogYnVpbGRQYXRoLFxuICBjb25jYXQ6IGJ1aWxkQ29uY2F0LFxuICBoYXNoOiBidWlsZEhhc2gsXG4gIHBhaXI6IGJ1aWxkUGFpcixcbiAgbGl0ZXJhbDogYnVpbGRMaXRlcmFsLFxuICBwcm9ncmFtOiBidWlsZFByb2dyYW0sXG4gIGxvYzogYnVpbGRMb2MsXG4gIHBvczogYnVpbGRQb3NpdGlvbixcblxuICBzdHJpbmc6IGxpdGVyYWwoJ1N0cmluZ0xpdGVyYWwnKSxcbiAgYm9vbGVhbjogbGl0ZXJhbCgnQm9vbGVhbkxpdGVyYWwnKSxcbiAgbnVtYmVyOiBsaXRlcmFsKCdOdW1iZXJMaXRlcmFsJyksXG4gIHVuZGVmaW5lZCgpIHtcbiAgICByZXR1cm4gYnVpbGRMaXRlcmFsKCdVbmRlZmluZWRMaXRlcmFsJywgdW5kZWZpbmVkKTtcbiAgfSxcbiAgbnVsbCgpIHtcbiAgICByZXR1cm4gYnVpbGRMaXRlcmFsKCdOdWxsTGl0ZXJhbCcsIG51bGwpO1xuICB9LFxufTtcblxuZnVuY3Rpb24gbGl0ZXJhbDxUIGV4dGVuZHMgQVNULkxpdGVyYWw+KHR5cGU6IFRbJ3R5cGUnXSkge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWU6IFRbJ3ZhbHVlJ10pIHtcbiAgICByZXR1cm4gYnVpbGRMaXRlcmFsKHR5cGUsIHZhbHVlKTtcbiAgfTtcbn1cbiJdfQ==